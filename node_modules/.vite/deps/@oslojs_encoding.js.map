{
  "version": 3,
  "sources": ["../../@oslojs/encoding/dist/hex.js", "../../@oslojs/encoding/dist/base32.js", "../../@oslojs/encoding/dist/base64.js"],
  "sourcesContent": ["export function encodeHexUpperCase(data) {\n    let result = \"\";\n    for (let i = 0; i < data.length; i++) {\n        result += alphabetUpperCase[data[i] >> 4];\n        result += alphabetUpperCase[data[i] & 0x0f];\n    }\n    return result;\n}\nexport function encodeHexLowerCase(data) {\n    let result = \"\";\n    for (let i = 0; i < data.length; i++) {\n        result += alphabetLowerCase[data[i] >> 4];\n        result += alphabetLowerCase[data[i] & 0x0f];\n    }\n    return result;\n}\nexport function decodeHex(data) {\n    if (data.length % 2 !== 0) {\n        throw new Error(\"Invalid hex string\");\n    }\n    const result = new Uint8Array(data.length / 2);\n    for (let i = 0; i < data.length; i += 2) {\n        if (!(data[i] in decodeMap)) {\n            throw new Error(\"Invalid character\");\n        }\n        if (!(data[i + 1] in decodeMap)) {\n            throw new Error(\"Invalid character\");\n        }\n        result[i / 2] |= decodeMap[data[i]] << 4;\n        result[i / 2] |= decodeMap[data[i + 1]];\n    }\n    return result;\n}\nconst alphabetUpperCase = \"0123456789ABCDEF\";\nconst alphabetLowerCase = \"0123456789abcdef\";\nconst decodeMap = {\n    \"0\": 0,\n    \"1\": 1,\n    \"2\": 2,\n    \"3\": 3,\n    \"4\": 4,\n    \"5\": 5,\n    \"6\": 6,\n    \"7\": 7,\n    \"8\": 8,\n    \"9\": 9,\n    a: 10,\n    A: 10,\n    b: 11,\n    B: 11,\n    c: 12,\n    C: 12,\n    d: 13,\n    D: 13,\n    e: 14,\n    E: 14,\n    f: 15,\n    F: 15\n};\n", "export function encodeBase32UpperCase(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32UpperCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32UpperCaseAlphabet, EncodingPadding.None);\n}\nexport function encodeBase32LowerCase(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase32LowerCaseNoPadding(bytes) {\n    return encodeBase32_internal(bytes, base32LowerCaseAlphabet, EncodingPadding.None);\n}\n/** Replaced: Use encodeBase32UpperCase() instead. */\nexport function encodeBase32(bytes) {\n    return encodeBase32UpperCase(bytes);\n}\n/** Replaced: Use encodeBase32UpperCaseNoPadding() instead. */\nexport function encodeBase32NoPadding(bytes) {\n    return encodeBase32UpperCaseNoPadding(bytes);\n}\nfunction encodeBase32_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 5) {\n        let buffer = 0n;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 5 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8n) | BigInt(bytes[i + j]);\n            bufferBitSize += 8;\n        }\n        if (bufferBitSize % 5 !== 0) {\n            buffer = buffer << BigInt(5 - (bufferBitSize % 5));\n            bufferBitSize += 5 - (bufferBitSize % 5);\n        }\n        for (let j = 0; j < 8; j++) {\n            if (bufferBitSize >= 5) {\n                result += alphabet[Number((buffer >> BigInt(bufferBitSize - 5)) & 0x1fn)];\n                bufferBitSize -= 5;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[Number((buffer << BigInt(6 - bufferBitSize)) & 0x3fn)];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nexport function decodeBase32(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase32IgnorePadding(encoded) {\n    return decodeBase32_internal(encoded, base32DecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase32_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 8) * 5);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 8) {\n        let chunk = 0n;\n        let bitsRead = 0;\n        for (let j = 0; j < 8; j++) {\n            if (padding === DecodingPadding.Required) {\n                if (encoded[i + j] === \"=\") {\n                    continue;\n                }\n                if (i + j >= encoded.length) {\n                    throw new Error(\"Invalid padding\");\n                }\n            }\n            if (padding === DecodingPadding.Ignore) {\n                if (i + j >= encoded.length || encoded[i + j] === \"=\") {\n                    continue;\n                }\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= BigInt(decodeMap[encoded[i + j]]) << BigInt((7 - j) * 5);\n            bitsRead += 5;\n        }\n        if (bitsRead < 40) {\n            let unused;\n            if (bitsRead === 10) {\n                unused = chunk & 0xffffffffn;\n            }\n            else if (bitsRead === 20) {\n                unused = chunk & 0xffffffn;\n            }\n            else if (bitsRead === 25) {\n                unused = chunk & 0xffffn;\n            }\n            else if (bitsRead === 35) {\n                unused = chunk & 0xffn;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0n) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = Number((chunk >> BigInt(32 - i * 8)) & 0xffn);\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nconst base32UpperCaseAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst base32LowerCaseAlphabet = \"abcdefghijklmnopqrstuvwxyz234567\";\nconst base32DecodeMap = {\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 0,\n    b: 1,\n    c: 2,\n    d: 3,\n    e: 4,\n    f: 5,\n    g: 6,\n    h: 7,\n    i: 8,\n    j: 9,\n    k: 10,\n    l: 11,\n    m: 12,\n    n: 13,\n    o: 14,\n    p: 15,\n    q: 16,\n    r: 17,\n    s: 18,\n    t: 19,\n    u: 20,\n    v: 21,\n    w: 22,\n    x: 23,\n    y: 24,\n    z: 25,\n    \"2\": 26,\n    \"3\": 27,\n    \"4\": 28,\n    \"5\": 29,\n    \"6\": 30,\n    \"7\": 31\n};\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\n", "export function encodeBase64(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.Include);\n}\nexport function encodeBase64NoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64Alphabet, EncodingPadding.None);\n}\nexport function encodeBase64url(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.Include);\n}\nexport function encodeBase64urlNoPadding(bytes) {\n    return encodeBase64_internal(bytes, base64urlAlphabet, EncodingPadding.None);\n}\nfunction encodeBase64_internal(bytes, alphabet, padding) {\n    let result = \"\";\n    for (let i = 0; i < bytes.byteLength; i += 3) {\n        let buffer = 0;\n        let bufferBitSize = 0;\n        for (let j = 0; j < 3 && i + j < bytes.byteLength; j++) {\n            buffer = (buffer << 8) | bytes[i + j];\n            bufferBitSize += 8;\n        }\n        for (let j = 0; j < 4; j++) {\n            if (bufferBitSize >= 6) {\n                result += alphabet[(buffer >> (bufferBitSize - 6)) & 0x3f];\n                bufferBitSize -= 6;\n            }\n            else if (bufferBitSize > 0) {\n                result += alphabet[(buffer << (6 - bufferBitSize)) & 0x3f];\n                bufferBitSize = 0;\n            }\n            else if (padding === EncodingPadding.Include) {\n                result += \"=\";\n            }\n        }\n    }\n    return result;\n}\nconst base64Alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst base64urlAlphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\nexport function decodeBase64(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64IgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64DecodeMap, DecodingPadding.Ignore);\n}\nexport function decodeBase64url(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Required);\n}\nexport function decodeBase64urlIgnorePadding(encoded) {\n    return decodeBase64_internal(encoded, base64urlDecodeMap, DecodingPadding.Ignore);\n}\nfunction decodeBase64_internal(encoded, decodeMap, padding) {\n    const result = new Uint8Array(Math.ceil(encoded.length / 4) * 3);\n    let totalBytes = 0;\n    for (let i = 0; i < encoded.length; i += 4) {\n        let chunk = 0;\n        let bitsRead = 0;\n        for (let j = 0; j < 4; j++) {\n            if (padding === DecodingPadding.Required && encoded[i + j] === \"=\") {\n                continue;\n            }\n            if (padding === DecodingPadding.Ignore &&\n                (i + j >= encoded.length || encoded[i + j] === \"=\")) {\n                continue;\n            }\n            if (j > 0 && encoded[i + j - 1] === \"=\") {\n                throw new Error(\"Invalid padding\");\n            }\n            if (!(encoded[i + j] in decodeMap)) {\n                throw new Error(\"Invalid character\");\n            }\n            chunk |= decodeMap[encoded[i + j]] << ((3 - j) * 6);\n            bitsRead += 6;\n        }\n        if (bitsRead < 24) {\n            let unused;\n            if (bitsRead === 12) {\n                unused = chunk & 0xffff;\n            }\n            else if (bitsRead === 18) {\n                unused = chunk & 0xff;\n            }\n            else {\n                throw new Error(\"Invalid padding\");\n            }\n            if (unused !== 0) {\n                throw new Error(\"Invalid padding\");\n            }\n        }\n        const byteLength = Math.floor(bitsRead / 8);\n        for (let i = 0; i < byteLength; i++) {\n            result[totalBytes] = (chunk >> (16 - i * 8)) & 0xff;\n            totalBytes++;\n        }\n    }\n    return result.slice(0, totalBytes);\n}\nvar EncodingPadding;\n(function (EncodingPadding) {\n    EncodingPadding[EncodingPadding[\"Include\"] = 0] = \"Include\";\n    EncodingPadding[EncodingPadding[\"None\"] = 1] = \"None\";\n})(EncodingPadding || (EncodingPadding = {}));\nvar DecodingPadding;\n(function (DecodingPadding) {\n    DecodingPadding[DecodingPadding[\"Required\"] = 0] = \"Required\";\n    DecodingPadding[DecodingPadding[\"Ignore\"] = 1] = \"Ignore\";\n})(DecodingPadding || (DecodingPadding = {}));\nconst base64DecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"+\": 62,\n    \"/\": 63\n};\nconst base64urlDecodeMap = {\n    \"0\": 52,\n    \"1\": 53,\n    \"2\": 54,\n    \"3\": 55,\n    \"4\": 56,\n    \"5\": 57,\n    \"6\": 58,\n    \"7\": 59,\n    \"8\": 60,\n    \"9\": 61,\n    A: 0,\n    B: 1,\n    C: 2,\n    D: 3,\n    E: 4,\n    F: 5,\n    G: 6,\n    H: 7,\n    I: 8,\n    J: 9,\n    K: 10,\n    L: 11,\n    M: 12,\n    N: 13,\n    O: 14,\n    P: 15,\n    Q: 16,\n    R: 17,\n    S: 18,\n    T: 19,\n    U: 20,\n    V: 21,\n    W: 22,\n    X: 23,\n    Y: 24,\n    Z: 25,\n    a: 26,\n    b: 27,\n    c: 28,\n    d: 29,\n    e: 30,\n    f: 31,\n    g: 32,\n    h: 33,\n    i: 34,\n    j: 35,\n    k: 36,\n    l: 37,\n    m: 38,\n    n: 39,\n    o: 40,\n    p: 41,\n    q: 42,\n    r: 43,\n    s: 44,\n    t: 45,\n    u: 46,\n    v: 47,\n    w: 48,\n    x: 49,\n    y: 50,\n    z: 51,\n    \"-\": 62,\n    _: 63\n};\n"],
  "mappings": "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
  "names": ["decodeMap", "i", "EncodingPadding", "DecodingPadding", "EncodingPadding", "DecodingPadding", "decodeMap", "i"]
}
