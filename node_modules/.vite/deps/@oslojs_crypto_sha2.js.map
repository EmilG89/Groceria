{
  "version": 3,
  "sources": ["../../@oslojs/binary/dist/uint.js", "../../@oslojs/binary/dist/bits.js", "../../@oslojs/crypto/dist/sha2/sha224.js", "../../@oslojs/crypto/dist/sha2/sha256.js", "../../@oslojs/crypto/dist/sha2/sha512.js", "../../@oslojs/crypto/dist/sha2/sha384.js", "../../@oslojs/crypto/dist/sha2/sha512_224.js", "../../@oslojs/crypto/dist/sha2/sha512_256.js"],
  "sourcesContent": ["class BigEndian {\n    uint8(data, offset) {\n        if (data.byteLength < offset + 1) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        return data[offset];\n    }\n    uint16(data, offset) {\n        if (data.byteLength < offset + 2) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        return (data[offset] << 8) | data[offset + 1];\n    }\n    uint32(data, offset) {\n        if (data.byteLength < offset + 4) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        let result = 0;\n        for (let i = 0; i < 4; i++) {\n            result |= data[offset + i] << (24 - i * 8);\n        }\n        return result;\n    }\n    uint64(data, offset) {\n        if (data.byteLength < offset + 8) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        let result = 0n;\n        for (let i = 0; i < 8; i++) {\n            result |= BigInt(data[offset + i]) << BigInt(56 - i * 8);\n        }\n        return result;\n    }\n    putUint8(target, value, offset) {\n        if (target.length < offset + 1) {\n            throw new TypeError(\"Not enough space\");\n        }\n        if (value < 0 || value > 255) {\n            throw new TypeError(\"Invalid uint8 value\");\n        }\n        target[offset] = value;\n    }\n    putUint16(target, value, offset) {\n        if (target.length < offset + 2) {\n            throw new TypeError(\"Not enough space\");\n        }\n        if (value < 0 || value > 65535) {\n            throw new TypeError(\"Invalid uint16 value\");\n        }\n        target[offset] = value >> 8;\n        target[offset + 1] = value & 0xff;\n    }\n    putUint32(target, value, offset) {\n        if (target.length < offset + 4) {\n            throw new TypeError(\"Not enough space\");\n        }\n        if (value < 0 || value > 4294967295) {\n            throw new TypeError(\"Invalid uint32 value\");\n        }\n        for (let i = 0; i < 4; i++) {\n            target[offset + i] = (value >> ((3 - i) * 8)) & 0xff;\n        }\n    }\n    putUint64(target, value, offset) {\n        if (target.length < offset + 8) {\n            throw new TypeError(\"Not enough space\");\n        }\n        if (value < 0 || value > 18446744073709551615n) {\n            throw new TypeError(\"Invalid uint64 value\");\n        }\n        for (let i = 0; i < 8; i++) {\n            target[offset + i] = Number((value >> BigInt((7 - i) * 8)) & 0xffn);\n        }\n    }\n}\nclass LittleEndian {\n    uint8(data, offset) {\n        if (data.byteLength < offset + 1) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        return data[offset];\n    }\n    uint16(data, offset) {\n        if (data.byteLength < offset + 2) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        return data[offset] | (data[offset + 1] << 8);\n    }\n    uint32(data, offset) {\n        if (data.byteLength < offset + 4) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        let result = 0;\n        for (let i = 0; i < 4; i++) {\n            result |= data[offset + i] << (i * 8);\n        }\n        return result;\n    }\n    uint64(data, offset) {\n        if (data.byteLength < offset + 8) {\n            throw new TypeError(\"Insufficient bytes\");\n        }\n        let result = 0n;\n        for (let i = 0; i < 8; i++) {\n            result |= BigInt(data[offset + i]) << BigInt(i * 8);\n        }\n        return result;\n    }\n    putUint8(target, value, offset) {\n        if (target.length < 1 + offset) {\n            throw new TypeError(\"Insufficient space\");\n        }\n        if (value < 0 || value > 255) {\n            throw new TypeError(\"Invalid uint8 value\");\n        }\n        target[offset] = value;\n    }\n    putUint16(target, value, offset) {\n        if (target.length < 2 + offset) {\n            throw new TypeError(\"Insufficient space\");\n        }\n        if (value < 0 || value > 65535) {\n            throw new TypeError(\"Invalid uint16 value\");\n        }\n        target[offset + 1] = value >> 8;\n        target[offset] = value & 0xff;\n    }\n    putUint32(target, value, offset) {\n        if (target.length < 4 + offset) {\n            throw new TypeError(\"Insufficient space\");\n        }\n        if (value < 0 || value > 4294967295) {\n            throw new TypeError(\"Invalid uint32 value\");\n        }\n        for (let i = 0; i < 4; i++) {\n            target[offset + i] = (value >> (i * 8)) & 0xff;\n        }\n    }\n    putUint64(target, value, offset) {\n        if (target.length < 8 + offset) {\n            throw new TypeError(\"Insufficient space\");\n        }\n        if (value < 0 || value > 18446744073709551615n) {\n            throw new TypeError(\"Invalid uint64 value\");\n        }\n        for (let i = 0; i < 8; i++) {\n            target[offset + i] = Number((value >> BigInt(i * 8)) & 0xffn);\n        }\n    }\n}\nexport const bigEndian = new BigEndian();\nexport const littleEndian = new LittleEndian();\n", "export function rotl32(x, n) {\n    return ((x << n) | (x >>> (32 - n))) >>> 0;\n}\nexport function rotr32(x, n) {\n    return ((x << (32 - n)) | (x >>> n)) >>> 0;\n}\nexport function rotr64(x, n) {\n    return ((x << BigInt(64 - n)) | (x >> BigInt(n))) & 0xffffffffffffffffn;\n}\nexport function rotl64(x, n) {\n    return ((x << BigInt(n)) | (x >> BigInt(64 - n))) & 0xffffffffffffffffn;\n}\n", "import { bigEndian } from \"@oslojs/binary\";\nimport { rotr32 } from \"@oslojs/binary\";\nexport function sha224(data) {\n    const hash = new SHA224();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SHA224 {\n    blockSize = 64;\n    size = 32;\n    blocks = new Uint8Array(64);\n    currentBlockSize = 0;\n    H = new Uint32Array([\n        0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4\n    ]);\n    l = 0n;\n    w = new Uint32Array(64);\n    update(data) {\n        this.l += BigInt(data.byteLength) * 8n;\n        if (this.currentBlockSize + data.byteLength < 64) {\n            this.blocks.set(data, this.currentBlockSize);\n            this.currentBlockSize += data.byteLength;\n            return;\n        }\n        let processed = 0;\n        if (this.currentBlockSize > 0) {\n            const next = data.slice(0, 64 - this.currentBlockSize);\n            this.blocks.set(next, this.currentBlockSize);\n            this.process();\n            processed += next.byteLength;\n            this.currentBlockSize = 0;\n        }\n        while (processed + 64 <= data.byteLength) {\n            const next = data.slice(processed, processed + 64);\n            this.blocks.set(next);\n            this.process();\n            processed += 64;\n        }\n        if (data.byteLength - processed > 0) {\n            const remaining = data.slice(processed);\n            this.blocks.set(remaining);\n            this.currentBlockSize = remaining.byteLength;\n        }\n    }\n    digest() {\n        this.blocks[this.currentBlockSize] = 0x80;\n        this.currentBlockSize += 1;\n        if (64 - this.currentBlockSize < 8) {\n            this.blocks.fill(0, this.currentBlockSize);\n            this.process();\n            this.currentBlockSize = 0;\n        }\n        this.blocks.fill(0, this.currentBlockSize);\n        bigEndian.putUint64(this.blocks, this.l, this.blockSize - 8);\n        this.process();\n        const result = new Uint8Array(28);\n        for (let i = 0; i < 7; i++) {\n            bigEndian.putUint32(result, this.H[i], i * 4);\n        }\n        return result;\n    }\n    process() {\n        for (let t = 0; t < 16; t++) {\n            this.w[t] =\n                ((this.blocks[t * 4] << 24) |\n                    (this.blocks[t * 4 + 1] << 16) |\n                    (this.blocks[t * 4 + 2] << 8) |\n                    this.blocks[t * 4 + 3]) >>>\n                    0;\n        }\n        for (let t = 16; t < 64; t++) {\n            const sigma1 = (rotr32(this.w[t - 2], 17) ^ rotr32(this.w[t - 2], 19) ^ (this.w[t - 2] >>> 10)) >>> 0;\n            const sigma0 = (rotr32(this.w[t - 15], 7) ^ rotr32(this.w[t - 15], 18) ^ (this.w[t - 15] >>> 3)) >>> 0;\n            this.w[t] = (sigma1 + this.w[t - 7] + sigma0 + this.w[t - 16]) | 0;\n        }\n        let a = this.H[0];\n        let b = this.H[1];\n        let c = this.H[2];\n        let d = this.H[3];\n        let e = this.H[4];\n        let f = this.H[5];\n        let g = this.H[6];\n        let h = this.H[7];\n        for (let t = 0; t < 64; t++) {\n            const sigma1 = (rotr32(e, 6) ^ rotr32(e, 11) ^ rotr32(e, 25)) >>> 0;\n            const ch = ((e & f) ^ (~e & g)) >>> 0;\n            const t1 = (h + sigma1 + ch + K[t] + this.w[t]) | 0;\n            const sigma0 = (rotr32(a, 2) ^ rotr32(a, 13) ^ rotr32(a, 22)) >>> 0;\n            const maj = ((a & b) ^ (a & c) ^ (b & c)) >>> 0;\n            const t2 = (sigma0 + maj) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        this.H[0] = (a + this.H[0]) | 0;\n        this.H[1] = (b + this.H[1]) | 0;\n        this.H[2] = (c + this.H[2]) | 0;\n        this.H[3] = (d + this.H[3]) | 0;\n        this.H[4] = (e + this.H[4]) | 0;\n        this.H[5] = (f + this.H[5]) | 0;\n        this.H[6] = (g + this.H[6]) | 0;\n        this.H[7] = (h + this.H[7]) | 0;\n    }\n}\nconst K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n", "import { bigEndian } from \"@oslojs/binary\";\nimport { rotr32 } from \"@oslojs/binary\";\nexport function sha256(data) {\n    const hash = new SHA256();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SHA256 {\n    blockSize = 64;\n    size = 32;\n    blocks = new Uint8Array(64);\n    currentBlockSize = 0;\n    H = new Uint32Array([\n        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n    ]);\n    l = 0n;\n    w = new Uint32Array(64);\n    update(data) {\n        this.l += BigInt(data.byteLength) * 8n;\n        if (this.currentBlockSize + data.byteLength < 64) {\n            this.blocks.set(data, this.currentBlockSize);\n            this.currentBlockSize += data.byteLength;\n            return;\n        }\n        let processed = 0;\n        if (this.currentBlockSize > 0) {\n            const next = data.slice(0, 64 - this.currentBlockSize);\n            this.blocks.set(next, this.currentBlockSize);\n            this.process();\n            processed += next.byteLength;\n            this.currentBlockSize = 0;\n        }\n        while (processed + 64 <= data.byteLength) {\n            const next = data.slice(processed, processed + 64);\n            this.blocks.set(next);\n            this.process();\n            processed += 64;\n        }\n        if (data.byteLength - processed > 0) {\n            const remaining = data.slice(processed);\n            this.blocks.set(remaining);\n            this.currentBlockSize = remaining.byteLength;\n        }\n    }\n    digest() {\n        this.blocks[this.currentBlockSize] = 0x80;\n        this.currentBlockSize += 1;\n        if (64 - this.currentBlockSize < 8) {\n            this.blocks.fill(0, this.currentBlockSize);\n            this.process();\n            this.currentBlockSize = 0;\n        }\n        this.blocks.fill(0, this.currentBlockSize);\n        bigEndian.putUint64(this.blocks, this.l, this.blockSize - 8);\n        this.process();\n        const result = new Uint8Array(32);\n        for (let i = 0; i < 8; i++) {\n            bigEndian.putUint32(result, this.H[i], i * 4);\n        }\n        return result;\n    }\n    process() {\n        for (let t = 0; t < 16; t++) {\n            this.w[t] =\n                ((this.blocks[t * 4] << 24) |\n                    (this.blocks[t * 4 + 1] << 16) |\n                    (this.blocks[t * 4 + 2] << 8) |\n                    this.blocks[t * 4 + 3]) >>>\n                    0;\n        }\n        for (let t = 16; t < 64; t++) {\n            const sigma1 = (rotr32(this.w[t - 2], 17) ^ rotr32(this.w[t - 2], 19) ^ (this.w[t - 2] >>> 10)) >>> 0;\n            const sigma0 = (rotr32(this.w[t - 15], 7) ^ rotr32(this.w[t - 15], 18) ^ (this.w[t - 15] >>> 3)) >>> 0;\n            this.w[t] = (sigma1 + this.w[t - 7] + sigma0 + this.w[t - 16]) | 0;\n        }\n        let a = this.H[0];\n        let b = this.H[1];\n        let c = this.H[2];\n        let d = this.H[3];\n        let e = this.H[4];\n        let f = this.H[5];\n        let g = this.H[6];\n        let h = this.H[7];\n        for (let t = 0; t < 64; t++) {\n            const sigma1 = (rotr32(e, 6) ^ rotr32(e, 11) ^ rotr32(e, 25)) >>> 0;\n            const ch = ((e & f) ^ (~e & g)) >>> 0;\n            const t1 = (h + sigma1 + ch + K[t] + this.w[t]) | 0;\n            const sigma0 = (rotr32(a, 2) ^ rotr32(a, 13) ^ rotr32(a, 22)) >>> 0;\n            const maj = ((a & b) ^ (a & c) ^ (b & c)) >>> 0;\n            const t2 = (sigma0 + maj) | 0;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) | 0;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) | 0;\n        }\n        this.H[0] = (a + this.H[0]) | 0;\n        this.H[1] = (b + this.H[1]) | 0;\n        this.H[2] = (c + this.H[2]) | 0;\n        this.H[3] = (d + this.H[3]) | 0;\n        this.H[4] = (e + this.H[4]) | 0;\n        this.H[5] = (f + this.H[5]) | 0;\n        this.H[6] = (g + this.H[6]) | 0;\n        this.H[7] = (h + this.H[7]) | 0;\n    }\n}\nconst K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n", "import { bigEndian } from \"@oslojs/binary\";\nimport { rotr64 } from \"@oslojs/binary\";\nexport function sha512(data) {\n    const hash = new SHA512();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SharedSHA512 {\n    blockSize = 128;\n    size = 64;\n    blocks = new Uint8Array(128);\n    currentBlockSize = 0;\n    l = 0n;\n    w = new BigUint64Array(80);\n    H;\n    constructor(H) {\n        if (H.byteLength !== 64) {\n            throw new TypeError();\n        }\n        this.H = H;\n    }\n    update(data) {\n        this.l += BigInt(data.byteLength) * 8n;\n        if (this.currentBlockSize + data.byteLength < 128) {\n            this.blocks.set(data, this.currentBlockSize);\n            this.currentBlockSize += data.byteLength;\n            return;\n        }\n        let processed = 0;\n        if (this.currentBlockSize > 0) {\n            const next = data.slice(0, 128 - this.currentBlockSize);\n            this.blocks.set(next, this.currentBlockSize);\n            this.process();\n            processed += next.byteLength;\n            this.currentBlockSize = 0;\n        }\n        while (processed + 128 <= data.byteLength) {\n            const next = data.slice(processed, processed + 128);\n            this.blocks.set(next);\n            this.process();\n            processed += 128;\n            this.currentBlockSize = 0;\n        }\n        if (data.byteLength - processed > 0) {\n            const remaining = data.slice(processed);\n            this.blocks.set(remaining);\n            this.currentBlockSize = remaining.byteLength;\n        }\n    }\n    putDigest(result) {\n        if (result.byteLength > 64 || result.byteLength % 8 !== 0) {\n            throw new TypeError();\n        }\n        this.blocks[this.currentBlockSize] = 0x80;\n        this.currentBlockSize += 1;\n        if (128 - this.currentBlockSize < 16) {\n            this.blocks.fill(0, this.currentBlockSize);\n            this.process();\n            this.currentBlockSize = 0;\n        }\n        this.blocks.fill(0, this.currentBlockSize);\n        bigEndian.putUint64(this.blocks, this.l, this.blockSize - 8);\n        this.process();\n        for (let i = 0; i < result.byteLength / 8; i++) {\n            bigEndian.putUint64(result, this.H[i], i * 8);\n        }\n    }\n    process() {\n        for (let t = 0; t < 16; t++) {\n            this.w[t] =\n                (BigInt(this.blocks[t * 8]) << 56n) |\n                    (BigInt(this.blocks[t * 8 + 1]) << 48n) |\n                    (BigInt(this.blocks[t * 8 + 2]) << 40n) |\n                    (BigInt(this.blocks[t * 8 + 3]) << 32n) |\n                    (BigInt(this.blocks[t * 8 + 4]) << 24n) |\n                    (BigInt(this.blocks[t * 8 + 5]) << 16n) |\n                    (BigInt(this.blocks[t * 8 + 6]) << 8n) |\n                    BigInt(this.blocks[t * 8 + 7]);\n        }\n        for (let t = 16; t < 80; t++) {\n            const sigma1 = (rotr64(this.w[t - 2], 19) ^ rotr64(this.w[t - 2], 61) ^ (this.w[t - 2] >> 6n)) &\n                0xffffffffffffffffn;\n            const sigma0 = (rotr64(this.w[t - 15], 1) ^ rotr64(this.w[t - 15], 8) ^ (this.w[t - 15] >> 7n)) &\n                0xffffffffffffffffn;\n            this.w[t] = (sigma1 + this.w[t - 7] + sigma0 + this.w[t - 16]) & 0xffffffffffffffffn;\n        }\n        let a = this.H[0];\n        let b = this.H[1];\n        let c = this.H[2];\n        let d = this.H[3];\n        let e = this.H[4];\n        let f = this.H[5];\n        let g = this.H[6];\n        let h = this.H[7];\n        for (let t = 0; t < 80; t++) {\n            const sigma1 = (rotr64(e, 14) ^ rotr64(e, 18) ^ rotr64(e, 41)) & 0xffffffffffffffffn;\n            const ch = ((e & f) ^ (~e & g)) & 0xffffffffffffffffn;\n            const t1 = (h + sigma1 + ch + K[t] + this.w[t]) & 0xffffffffffffffffn;\n            const sigma0 = (rotr64(a, 28) ^ rotr64(a, 34) ^ rotr64(a, 39)) & 0xffffffffffffffffn;\n            const maj = ((a & b) ^ (a & c) ^ (b & c)) & 0xffffffffffffffffn;\n            const t2 = (sigma0 + maj) & 0xffffffffffffffffn;\n            h = g;\n            g = f;\n            f = e;\n            e = (d + t1) & 0xffffffffffffffffn;\n            d = c;\n            c = b;\n            b = a;\n            a = (t1 + t2) & 0xffffffffffffffffn;\n        }\n        this.H[0] = (a + this.H[0]) & 0xffffffffffffffffn;\n        this.H[1] = (b + this.H[1]) & 0xffffffffffffffffn;\n        this.H[2] = (c + this.H[2]) & 0xffffffffffffffffn;\n        this.H[3] = (d + this.H[3]) & 0xffffffffffffffffn;\n        this.H[4] = (e + this.H[4]) & 0xffffffffffffffffn;\n        this.H[5] = (f + this.H[5]) & 0xffffffffffffffffn;\n        this.H[6] = (g + this.H[6]) & 0xffffffffffffffffn;\n        this.H[7] = (h + this.H[7]) & 0xffffffffffffffffn;\n    }\n}\nexport class SHA512 {\n    blockSize = 128;\n    size = 64;\n    sha512 = new SharedSHA512(new BigUint64Array([\n        0x6a09e667f3bcc908n,\n        0xbb67ae8584caa73bn,\n        0x3c6ef372fe94f82bn,\n        0xa54ff53a5f1d36f1n,\n        0x510e527fade682d1n,\n        0x9b05688c2b3e6c1fn,\n        0x1f83d9abfb41bd6bn,\n        0x5be0cd19137e2179n\n    ]));\n    update(data) {\n        this.sha512.update(data);\n    }\n    digest() {\n        const result = new Uint8Array(64);\n        this.sha512.putDigest(result);\n        return result;\n    }\n}\nconst K = new BigUint64Array([\n    0x428a2f98d728ae22n,\n    0x7137449123ef65cdn,\n    0xb5c0fbcfec4d3b2fn,\n    0xe9b5dba58189dbbcn,\n    0x3956c25bf348b538n,\n    0x59f111f1b605d019n,\n    0x923f82a4af194f9bn,\n    0xab1c5ed5da6d8118n,\n    0xd807aa98a3030242n,\n    0x12835b0145706fben,\n    0x243185be4ee4b28cn,\n    0x550c7dc3d5ffb4e2n,\n    0x72be5d74f27b896fn,\n    0x80deb1fe3b1696b1n,\n    0x9bdc06a725c71235n,\n    0xc19bf174cf692694n,\n    0xe49b69c19ef14ad2n,\n    0xefbe4786384f25e3n,\n    0x0fc19dc68b8cd5b5n,\n    0x240ca1cc77ac9c65n,\n    0x2de92c6f592b0275n,\n    0x4a7484aa6ea6e483n,\n    0x5cb0a9dcbd41fbd4n,\n    0x76f988da831153b5n,\n    0x983e5152ee66dfabn,\n    0xa831c66d2db43210n,\n    0xb00327c898fb213fn,\n    0xbf597fc7beef0ee4n,\n    0xc6e00bf33da88fc2n,\n    0xd5a79147930aa725n,\n    0x06ca6351e003826fn,\n    0x142929670a0e6e70n,\n    0x27b70a8546d22ffcn,\n    0x2e1b21385c26c926n,\n    0x4d2c6dfc5ac42aedn,\n    0x53380d139d95b3dfn,\n    0x650a73548baf63den,\n    0x766a0abb3c77b2a8n,\n    0x81c2c92e47edaee6n,\n    0x92722c851482353bn,\n    0xa2bfe8a14cf10364n,\n    0xa81a664bbc423001n,\n    0xc24b8b70d0f89791n,\n    0xc76c51a30654be30n,\n    0xd192e819d6ef5218n,\n    0xd69906245565a910n,\n    0xf40e35855771202an,\n    0x106aa07032bbd1b8n,\n    0x19a4c116b8d2d0c8n,\n    0x1e376c085141ab53n,\n    0x2748774cdf8eeb99n,\n    0x34b0bcb5e19b48a8n,\n    0x391c0cb3c5c95a63n,\n    0x4ed8aa4ae3418acbn,\n    0x5b9cca4f7763e373n,\n    0x682e6ff3d6b2b8a3n,\n    0x748f82ee5defb2fcn,\n    0x78a5636f43172f60n,\n    0x84c87814a1f0ab72n,\n    0x8cc702081a6439ecn,\n    0x90befffa23631e28n,\n    0xa4506cebde82bde9n,\n    0xbef9a3f7b2c67915n,\n    0xc67178f2e372532bn,\n    0xca273eceea26619cn,\n    0xd186b8c721c0c207n,\n    0xeada7dd6cde0eb1en,\n    0xf57d4f7fee6ed178n,\n    0x06f067aa72176fban,\n    0x0a637dc5a2c898a6n,\n    0x113f9804bef90daen,\n    0x1b710b35131c471bn,\n    0x28db77f523047d84n,\n    0x32caab7b40c72493n,\n    0x3c9ebe0a15c9bebcn,\n    0x431d67c49c100d4cn,\n    0x4cc5d4becb3e42b6n,\n    0x597f299cfc657e2an,\n    0x5fcb6fab3ad6faecn,\n    0x6c44198c4a475817n\n]);\n", "import { SharedSHA512 } from \"./sha512.js\";\nexport function sha384(data) {\n    const hash = new SHA384();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SHA384 {\n    blockSize = 128;\n    size = 48;\n    sha512 = new SharedSHA512(new BigUint64Array([\n        0xcbbb9d5dc1059ed8n,\n        0x629a292a367cd507n,\n        0x9159015a3070dd17n,\n        0x152fecd8f70e5939n,\n        0x67332667ffc00b31n,\n        0x8eb44a8768581511n,\n        0xdb0c2e0d64f98fa7n,\n        0x47b5481dbefa4fa4n\n    ]));\n    update(data) {\n        this.sha512.update(data);\n    }\n    digest() {\n        const result = new Uint8Array(48);\n        this.sha512.putDigest(result);\n        return result;\n    }\n}\n", "import { SharedSHA512 } from \"./sha512.js\";\nexport function sha512_224(data) {\n    const hash = new SHA512_224();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SHA512_224 {\n    blockSize = 128;\n    size = 28;\n    sha512 = new SharedSHA512(new BigUint64Array([\n        0x8c3d37c819544da2n,\n        0x73e1996689dcd4d6n,\n        0x1dfab7ae32ff9c82n,\n        0x679dd514582f9fcfn,\n        0x0f6d2b697bd44da8n,\n        0x77e36f7304c48942n,\n        0x3f9d85a86a1d36c8n,\n        0x1112e6ad91d692a1n\n    ]));\n    update(data) {\n        this.sha512.update(data);\n    }\n    digest() {\n        // SharedSHA512.putDigest() expects byte array with a length of multiple of 8\n        const result = new Uint8Array(32);\n        this.sha512.putDigest(result);\n        return result.slice(0, 28);\n    }\n}\n", "import { SharedSHA512 } from \"./sha512.js\";\nexport function sha512_256(data) {\n    const hash = new SHA512_256();\n    hash.update(data);\n    return hash.digest();\n}\nexport class SHA512_256 {\n    blockSize = 128;\n    size = 28;\n    sha512 = new SharedSHA512(new BigUint64Array([\n        0x22312194fc2bf72cn,\n        0x9f555fa3c84c64c2n,\n        0x2393b86b6f53b151n,\n        0x963877195940eabdn,\n        0x96283ee2a88effe3n,\n        0xbe5e1e2553863992n,\n        0x2b0199fc2c85b8aan,\n        0x0eb72ddc81c52ca2n\n    ]));\n    update(data) {\n        this.sha512.update(data);\n    }\n    digest() {\n        const result = new Uint8Array(32);\n        this.sha512.putDigest(result);\n        return result;\n    }\n}\n"],
  "mappings": "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",
  "names": ["K", "K"]
}
